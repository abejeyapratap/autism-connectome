import numpy as np
import helpers as helper

DELIM = 150

# Group Diff plots
connectomeNNS = "75.2987	79.4195	73.5940	77.5772	77.7550	71.3490	76.3356	76.3456	77.0839	82.1376	69.0805	78.5805	76.8490	79.6846	81.7517	72.8725	77.6443	68.3523	75.1611	76.7349	82.4430	77.7215	84.1242	79.7114	71.4899	73.9228	83.0503	75.3691	83.2013	74.8557	83.6242	79.1007	81.2315	78.3255	78.1779	77.5268	81.7886	80.0235	77.4195	80.1779	79.9195	81.6309	73.3490	70.4530	74.1376	71.3356	78.8154	81.6107	67.5772	81.8993	78.9463	82.8188	82.8289	82.6779	74.1107	81.4060	77.2517	80.6980	76.2013	67.4329	76.9664	78.0302	85.6745	79.0738	74.0604	80.8087	78.7886	81.1544	80.9832	78.9161	82.4497	80.3859	77.0067	83.5302	80.2349	79.9195	77.7114	75.5839	78.3960	81.3624	77.6174	80.8725	77.3557	63.1174	80.2886	77.5268	79.2282	65.4631	79.5470	67.2181	80.7483	76.7148	80.4295	65.4329	76.7752	72.4463	74.1779	78.4933	79.9732	74.6711	78.2148	79.1980	77.9799	73.7383	75.6544	77.2383	77.4497	79.5168	82.3557	76.7584	79.2987	78.4966	74.4966	80.3792	78.2013	74.8456	73.6980	78.5134	75.7349	80.3389	77.1074	83.1577	76.6141	72.9832	80.2383	76.0671	77.1644	72.9497	76.7315	78.1678	80.6443	79.7752	82.6174	74.1141	81.5436	79.6812	73.5671	81.4463	76.0940	75.2651	64.4765	74.7517	72.3523	72.6879	77.9765	75.3826	85.8859	68.7282	76.1040	80.4027	76.1500	77.2967	73.2133	69.0800	80.6767	75.9300	76.4267	78.2367	77.6100	64.8467	81.9233	51.6567	81.1500	75.1300	79.2833	76.6100	77.6333	83.2167	70.1467	77.2200	80.7533	82.7667	80.8867	78.3033	68.6100	82.3500	79.1767	78.1600	77.8633	78.6500	74.6233	77.9500	79.0100	74.2967	77.1200	66.7867	81.0933	75.3733	77.2467	79.9667	83.0400	72.3567	78.6267	78.2700	79.5733	71.4933	71.4533	78.8633	79.0800	78.8667	74.5333	80.3067	75.9767	75.1267	79.3467	70.2933	80.6367	79.2167	78.6900	74.1467	76.6667	77.2900	73.6733	76.4167	77.4400	66.8000	79.1600	80.2267	80.7533	64.2267	79.2500	79.1667	77.9533	80.3400	81.3767	73.8367	74.2733	80.2900	81.0833	79.2400	78.4667	76.3833	78.6767	78.5467	79.0567	74.6800	79.6167	82.5733	73.3267	76.1567	82.2433	77.6400	73.0333	77.3000	73.1967	77.7800	77.8333	80.6033	82.5767	78.1900	66.9033	81.2967	74.1267	81.4167	76.3533	74.0967	80.1533	77.4800	71.9833	75.6000	83.2367	60.6667	75.2100	77.2400	77.2600	77.4733	79.0167	78.3300	81.8933	70.2900	76.3933	76.8567	82.4200	72.3700	36.1133	79.5533	79.2333	78.5033	79.9967	82.6967	73.8700	42.8167	74.2833	76.7167	75.7067	67.9033	83.4900	82.2433	80.4933	72.3133	82.6900	79.3800	78.2200	83.1600	77.0100	66.3067	75.0233	78.4100	78.5167	77.7567	63.3300	68.8767	75.3433	38.1533	78.0200	60.1133	67.5033	64.4400	76.9600	74.0200	70.6600	54.0167	76.3167".split()
connectomeNNS = np.array(list(map(float, connectomeNNS)))
dmnNNS = "83.1485	89.0283	80.8725	84.7680	87.9049	74.9052	87.3942	83.1339	84.5054	87.7590	75.5179	84.0531	84.5054	89.4514	87.1462	78.7715	85.7456	73.8255	85.3370	81.0038	91.2022	85.6580	86.8252	82.5357	74.2340	83.1485	90.5603	83.3382	89.9621	83.2507	89.3201	83.5425	88.3134	86.5042	83.1923	86.8982	87.1900	86.5918	85.5413	89.7870	88.1529	87.2629	87.6131	81.6020	82.2877	75.4450	87.9049	89.4660	77.1666	86.2416	82.3169	89.9183	86.7814	87.3213	78.9028	85.6288	85.0015	85.3516	83.8343	75.1094	85.1619	82.2002	90.3998	83.5570	78.0274	85.4829	85.5267	87.4672	87.7590	83.5425	86.5188	85.6142	85.6434	89.4076	84.0093	86.1687	79.5594	86.6647	86.9711	87.7298	81.4999	87.2046	84.5492	75.8389	85.5413	85.7601	84.9869	69.9008	86.1978	73.9714	88.6636	85.1474	90.3998	82.3315	86.6939	79.9241	80.8725	85.3078	85.8331	83.1048	82.9443	87.5255	81.1935	77.3417	82.8130	88.0945	83.8634	87.2046	87.5547	82.6816	82.5649	85.9060	77.9982	89.2472	85.8769	85.0015	78.3630	84.9577	72.2936	86.1978	81.8792	87.0441	85.9352	75.4888	85.2349	80.5515	81.2664	81.3977	86.8106	83.1339	89.8453	84.3303	90.7062	84.8118	89.7870	84.6075	82.7254	89.3931	88.2550	87.0587	72.5562	80.3910	81.8938	83.4695	85.2495	87.0295	92.8071	77.7210	81.6458	88.8386	83.7101	84.2174	80.8261	71.3768	87.2899	80.8406	82.5507	87.1739	80.2754	71.0580	87.8696	68.7391	91.5072	80.5507	89.6087	85.6377	83.2899	90.9420	72.0435	83.5072	80.8261	87.7971	84.1884	86.4203	80.5652	90.9710	90.5072	87.5362	86.9420	83.6232	79.8116	81.8406	89.6087	78.4348	77.7681	77.9275	89.0870	80.6087	82.3188	84.4783	90.3478	78.0870	83.3768	87.5217	82.5942	75.9855	77.4638	82.2609	83.8551	86.4928	78.4493	82.8841	82.0870	83.8841	86.4493	81.2464	84.3913	87.6232	89.9565	79.9855	84.0435	81.9130	82.2754	83.2464	82.8841	72.9275	86.9130	89.4928	88.6957	69.4348	84.5942	84.0580	84.5217	88.0145	84.2899	77.4928	78.0145	87.1449	86.1884	87.3478	86.5942	85.1884	83.2174	74.6087	80.2754	83.3043	84.4493	90.0145	86.2174	83.3188	90.9855	85.8116	83.9855	78.3043	75.8406	82.5507	84.9855	85.8116	90.4058	82.2319	77.4783	89.2609	77.7101	88.2319	82.3768	83.2899	85.3043	78.5507	76.1884	79.9565	86.5072	71.4058	84.8551	86.2464	83.7826	85.6377	83.9565	84.6957	87.6377	78.4058	82.7681	84.9710	89.2754	82.4203	36.6232	86.8261	88.1739	88.0870	90.4493	90.1159	77.7101	48.7391	81.1739	77.5507	74.2754	73.0000	89.9565	88.5507	85.3913	79.7536	92.1304	82.5652	83.7826	85.0580	77.3188	77.6957	85.6087	89.6087	87.5797	81.5072	67.1449	68.6377	84.3478	40.2754	87.8551	65.4783	74.4928	66.8986	80.8841	88.4348	78.8551	56.9565	88.5507".split()
dmnNNS = np.array(list(map(float, dmnNNS)))
fpnNNS = "79.2617	82.8859	74.2282	80.4474	83.3110	65.4810	73.6465	78.2550	72.2819	81.2081	68.1879	76.3535	77.1588	76.6443	84.1387	81.6555	80.6264	77.5168	80.1566	79.8658	83.8031	82.9978	86.9799	79.9553	76.6443	78.3221	78.7248	70.0895	84.5414	69.7763	85.6823	83.4004	80.8054	76.6890	79.7763	82.0134	80.4474	83.6242	74.7427	81.3647	80.2237	83.0872	71.3423	71.2081	76.6667	76.3087	80.3132	77.3826	75.7494	83.2438	83.6913	86.1074	85.3691	84.2282	77.4273	84.9217	81.6331	79.9329	78.1879	67.9195	79.9776	83.7136	89.6197	78.2998	72.5056	80.6935	85.0112	83.9374	86.0626	78.0089	83.0649	82.3043	78.2998	86.9799	73.7360	77.2036	78.6353	82.6846	81.1857	83.1320	78.4340	78.8143	80.4922	68.0537	81.3423	76.5548	80.6935	65.4362	80.8949	73.0201	81.5660	78.8591	80.9620	66.9575	77.5839	71.9016	74.6085	79.9329	78.9262	83.0872	74.9217	76.5101	79.4183	78.6577	81.5660	77.9866	81.9911	79.7315	81.0291	72.5280	85.1007	74.9217	76.6667	81.2975	83.7584	76.0850	69.4407	83.1096	75.4810	82.9978	74.4072	82.6174	78.8367	74.8770	78.8814	75.3244	83.1096	75.9732	76.4877	79.1723	79.7763	75.5928	83.1544	78.3893	84.0045	79.8881	79.5526	83.4452	77.2931	77.0022	65.0559	78.6353	75.5034	73.4676	81.3647	77.9195	88.0089	64.5638	76.5324	83.1544	74.6444	79.0889	71.8222	72.0222	81.8444	74.6222	80.0222	80.6444	81.3556	79.0000	82.7556	54.9111	82.1778	77.1778	79.6444	75.0000	78.9111	81.9556	68.9111	83.6000	81.0889	83.9556	81.3556	77.3111	70.0222	86.0222	83.2444	79.0889	81.9111	80.9778	77.6667	76.9556	78.5111	70.9556	78.8222	59.2889	81.4444	79.8889	77.1111	79.6667	86.7556	76.6889	83.7778	77.9333	84.8222	69.2444	70.5556	76.4667	83.6444	79.0000	75.9778	80.2667	74.3778	74.5333	81.6889	76.8000	80.2889	80.9556	84.3111	72.9556	77.1111	75.6000	74.3333	76.8667	81.4000	70.6222	79.7111	79.5111	82.6444	68.0444	83.2667	81.9333	76.1778	78.0444	83.4889	72.0667	77.7333	80.5333	83.2667	81.4444	80.8222	72.5778	74.4667	79.5111	80.2222	66.5333	82.4667	77.2222	78.3333	69.9111	85.1778	82.8444	65.3333	81.2000	73.2889	80.2889	81.7778	77.2222	84.7778	77.4889	70.6667	83.4667	77.8222	76.1556	70.4222	72.0667	85.2000	77.4000	71.9111	74.1333	83.9333	52.9556	77.7556	84.2667	63.0222	73.0000	77.6667	75.8000	83.5333	70.9111	77.6222	77.8667	85.1111	70.7333	24.4222	77.0667	74.6444	79.4444	81.1333	85.1778	75.2444	50.0444	73.2444	79.6667	80.2444	73.4222	85.5333	79.0667	79.5111	75.4000	83.8000	80.6667	84.5778	85.2444	84.8667	62.4667	75.3333	80.4222	80.8667	76.6889	67.6222	71.7556	78.3333	33.0889	78.0000	67.9556	70.0000	58.1333	77.8000	76.0444	71.3111	57.1333	78.9111".split()
fpnNNS = np.array(list(map(float, fpnNNS)))

# print(len(connectomeNNS), len(dmnNNS), len(fpnNNS))
# print(helpers.calculateGroupDifference(connectomeNNS[:150],connectomeNNS[150:],parametric=True,paired=False))

# healthy-patient, healthy-patient,...
data = []
allArr = [connectomeNNS, dmnNNS, fpnNNS]
for arr in allArr:
    data.append(arr[:DELIM]) # healthy
    data.append(arr[DELIM:]) # patient
    print(helper.calculateGroupDifference(arr[:DELIM],arr[DELIM:],parametric=True,paired=False, discardOutliers=True))

dataLabels = ['HC', 'ASD']*3
colors=['steelblue', '#AB3E16']*3
# colors=['#351C4D', '#AB3E16','#849974','#2096BA','#F7DFD4','#F5AB99']

plotExt = ".svg"
outputPath = "../../experiment/results_main/plots/groupdiff" + plotExt
helper.drawBoxPlot(data,dataLabels,"",outputPath,xLabel='',yLabel="Network Normality Score (%)",colors=colors,rotation=0,plotScatter=True,yLim=[30,102],middleLine="mean")


# ignore
def drawBoxPlot(data,dataLabels,title,outputPath,xLabel="",yLabel="matching accuracy (%)",colors=['#2096BA','#351C4D', '#AB3E16','#849974', '#F7DFD4','#F5AB99'],rotation=0,plotScatter=True,yLim=[],middleLine='mean'): #shutter blue, nightfall, rust, fresh, macaron, tropical pink
    import matplotlib.pylab as plt
    import numpy as np
    
    fig=plt.figure()
    
    ax=fig.add_subplot(111)
    if(xLabel!=""):
        ax.set_xlabel(xLabel,fontsize=16)
    if(yLabel!=""):
        ax.set_ylabel(yLabel,fontsize=16)
    ax.tick_params(axis='both',labelsize=10)
    if(len(yLim)==2):#use this line to set the y limits of the plot, useful for opening up space above the bars to put stars at postprocessing
        plt.ylim(yLim[0],yLim[1])
    #plt.yticks(range(size), size=7)

    boxprops = dict(linestyle='-', linewidth=4)
    if(plotScatter==False):
        markersize=4
    else:
        markersize=0
    flierprops = dict(marker='.', markerfacecolor='grey', markeredgecolor='none',markersize=markersize,linestyle='none') #outliers
    if(middleLine=='median'):
        medianprops = dict(linestyle='-', linewidth=1.5, color='firebrick') #median line
    else:
        medianprops = dict(linestyle='-', linewidth=0, color='firebrick') #median line
    
    if(middleLine=='mean'):
        meanlineprops = dict(linestyle='-', linewidth=1.5, color='firebrick') # mean line
    else:
        meanlineprops = dict(linestyle='-', linewidth=0, color='firebrick') # mean line
    meanpointprops = dict(marker='D', markeredgecolor='black', markerfacecolor='firebrick')#to put apoint to the mean instead of a line
    whiskerprops=dict(linestyle='--',linewidth=0.5,color='grey') # lines extending the boxes
    capprops=dict(linestyle='-',linewidth=0.5,color='grey') # caps perpendicular to whiskers
    positions = [1,2,4,5,7,8]
    boxplot_parts = ax.boxplot(data,positions=positions,whiskerprops=whiskerprops,boxprops=boxprops,capprops=capprops,medianprops=medianprops,meanprops=meanlineprops,meanline=True,showmeans=True,notch=False,flierprops=flierprops,patch_artist=True,zorder=0)
    for i in range(len(boxplot_parts['boxes'])):
        boxplot_parts['boxes'][i].set_edgecolor(colors[i])
        boxplot_parts['boxes'][i].set_facecolor('none')
        boxplot_parts['boxes'][i].set_linewidth(1.5)
    
    if(plotScatter==True):
        xScattered = []
        for i,dataChunk in enumerate(data):
            xScattered.append(np.random.normal(i+1,0.02,len(dataChunk)))
        for i in range(len(data)):
            plt.scatter(xScattered[i],data[i],color=colors[i],alpha=0.5,s=4,edgecolors='dimgray',linewidth=0.3,zorder=1)
        
    plt.xticks(range(len(dataLabels)+1)[1:], dataLabels, rotation=rotation)
    plt.title(title)
    plt.savefig(outputPath, transparent=False, dpi=300, bbox_inches='tight')
    plt.close()
